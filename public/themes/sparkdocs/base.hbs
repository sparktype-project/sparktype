<!DOCTYPE html>
<html lang="en">
<head>
  {{> head headContext}}
</head>
<body class="min-h-screentext-text"
      x-data="{
        sidebarOpen: window.innerWidth >= 768,
        expandedSections: [],
        currentPath: window.location.pathname,
        init() {
          window.addEventListener('resize', () => {
            this.sidebarOpen = window.innerWidth >= 768;
          });
        },
        toggleSection(id) {
          if (this.expandedSections.includes(id)) {
            this.expandedSections = this.expandedSections.filter(item => item !== id);
          } else {
            this.expandedSections.push(id);
          }
        },
        // Normalize URL for consistent comparison
        normalizeUrl: function(url) {
          if (!url) return '/';
          var cleaned = url.replace(/^\.\//, '/');
          cleaned = cleaned.replace(/\/index\.html$/, '/');
          cleaned = cleaned.replace(/\/$/, '') || '/';
          return cleaned;
        },
        // Check if a navigation href is active (matches current page)
        isActive: function(href) {
          if (!href) return false;
          var cleanHref = this.normalizeUrl(href);
          var cleanCurrent = this.normalizeUrl(this.currentPath);
          return cleanHref === cleanCurrent;
        },
        // Auto-expand all sections by default
        autoExpandSections: function() {
          this.expandedSections = [];
          {{#each navLinks}}
            {{#if this.children}}
              this.expandedSections.push('{{@index}}');
            {{/if}}
          {{/each}}
        }
      }"
      x-init="autoExpandSections()">

  {{> header}}

  {{!-- Unified Layout: Flex on mobile, Grid on desktop --}}
  <div class="flex flex-col lg:grid lg:grid-cols-[var(--sidebar-width)_1fr] min-h-screen">
    {{!-- Sidebar --}}
    {{> sidebar}}

    {{!-- Main Content --}}
    <div class="flex flex-col flex-1">
      {{!-- Page Content --}}
      <main class="flex-1">
        {{{body}}}
      </main>

      {{!-- Footer --}}
      {{> footer}}
    </div>
  </div>

  {{!-- Mobile Sidebar Overlay --}}
  {{!-- Backdrop --}}
  <div class="md:hidden fixed inset-0 bg-black opacity-80 backdrop-blur z-40 transition-opacity"
       x-show="sidebarOpen && window.innerWidth < 768"
       @click="sidebarOpen = false"
       x-transition:enter="transition-opacity ease-out duration-300"
       x-transition:enter-start="opacity-0"
       x-transition:enter-end="opacity-100"
       x-transition:leave="transition-opacity ease-in duration-200"
       x-transition:leave-start="opacity-100"
       x-transition:leave-end="opacity-0">
  </div>



  <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>

  {{!-- TOC Active Section Highlighting --}}
  <script>
    (function() {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          const id = entry.target.getAttribute('id');
          const link = document.querySelector(`.toc-link[href="#${id}"]`);

          if (entry.isIntersecting) {
            document.querySelectorAll('.toc-link').forEach(l => l.classList.remove('active'));
            if (link) link.classList.add('active');
          }
        });
      }, { rootMargin: '-80px 0px -80% 0px' });

      // Observe all headings with IDs
      document.querySelectorAll('h2[id], h3[id], h4[id]').forEach(heading => {
        observer.observe(heading);
      });
    })();
  </script>
</body>
</html>